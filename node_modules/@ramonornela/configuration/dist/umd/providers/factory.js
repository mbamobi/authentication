(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", './data/object', './data/json'], factory);
    }
})(function (require, exports) {
    "use strict";
    var object_1 = require('./data/object');
    var json_1 = require('./data/json');
    function dataFactory(config, env) {
        return new object_1.ObjectData(config, env);
    }
    exports.dataFactory = dataFactory;
    function jsonFactory(config, xhr, env) {
        return new json_1.JsonData(config, xhr, env);
    }
    exports.jsonFactory = jsonFactory;
    function loaderFactory(config, xhr, env, customLoader) {
        switch (true) {
            case typeof config === 'object':
                return dataFactory(config, env);
            case typeof config === 'string' && (config.indexOf('.json') !== -1 || config.indexOf('http') !== -1):
                return jsonFactory(config, xhr, env);
            case typeof customLoader === 'function':
                return customLoader.apply(null, [config, env]);
            default:
                throw new Error('Invalid configuration');
        }
    }
    exports.loaderFactory = loaderFactory;
});
//# sourceMappingURL=factory.js.map
import { OpaqueToken } from '@angular/core';
import { Config } from './config';
export declare const ConfigToken: OpaqueToken;
export declare const EnvToken: OpaqueToken;
export declare const CustomLoaderToken: OpaqueToken;
export declare abstract class ConfigBase implements Config {
    private env;
    protected data: Object;
    protected static envs: Array<string>;
    protected envsExtend: {
        [key: string]: string;
    };
    protected keysEnvExtend: {
        [key: string]: {
            [key: string]: string;
        };
    };
    constructor(env?: string, ...args: Array<any>);
    protected abstract getData(...args: Array<any>): Object;
    extractExtends(): void;
    setEnv(env: string): this;
    getEnv(): string;
    setEnvExtend(env: string, envExtend: string): this;
    getEnvExtend(env: string): string | void;
    setKeyEnvExtend(key: string, env: string, envExtend: string): this;
    getKeyEnvExtend(key: string, env: string): string | void;
    set(key: string, value: any, env?: boolean | string): this;
    protected validateDataAlreadyAssign(key: string): void;
    protected checkExtends(env: string, key: string, value: any): void;
    get(key: string, env?: boolean | string): any;
    protected getResult(result: any, key: string, env: string): any;
    protected orderEnvExtends(result: any, key: string, env: string, argumentsApply: Array<any>): void;
    getAll(): any;
}

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core', '@angular/http', '../config-base'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    var http_1 = require('@angular/http');
    var config_base_1 = require('../config-base');
    var JsonData = (function (_super) {
        __extends(JsonData, _super);
        function JsonData(file, xhr, env) {
            _super.call(this, env, file, xhr);
        }
        JsonData.prototype.getData = function (file, xhr) {
            var data = this.load(file, xhr);
            if (Array.isArray(data)) {
                throw new Error("Data type 'array' to config invalid");
            }
            if (Object.keys(data).length === 0) {
                throw new Error('Config is required');
            }
            return data;
        };
        JsonData.prototype.load = function (file, xhr) {
            var data;
            var _xhr = xhr.build();
            _xhr.open('GET', file, false);
            _xhr.reponseType = 'json';
            _xhr.addEventListener('load', function () {
                try {
                    data = JSON.parse(_xhr.responseText);
                }
                catch (err) {
                    throw new Error("Syntax error '" + file + "' error: " + err.message);
                }
            });
            _xhr.addEventListener('error', function () {
                throw new Error("Problem to access '" + file + "'");
            });
            _xhr.send();
            return data;
        };
        JsonData.decorators = [
            { type: core_1.Injectable },
        ];
        JsonData.ctorParameters = [
            null,
            { type: http_1.BrowserXhr, },
            null,
        ];
        return JsonData;
    }(config_base_1.ConfigBase));
    exports.JsonData = JsonData;
});
//# sourceMappingURL=json.js.map
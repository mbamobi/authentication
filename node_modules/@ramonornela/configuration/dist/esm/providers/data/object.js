var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable } from '@angular/core';
import { ConfigBase } from '../config-base';
export var ObjectData = (function (_super) {
    __extends(ObjectData, _super);
    function ObjectData(data, env) {
        _super.call(this, env, data);
    }
    ObjectData.prototype.getData = function (data) {
        if (data === null || Array.isArray(data)) {
            throw new Error('Data type config invalid');
        }
        if (Object.keys(data).length === 0) {
            throw new Error('Config is required');
        }
        return data;
    };
    ObjectData.decorators = [
        { type: Injectable },
    ];
    ObjectData.ctorParameters = [
        { type: Object, },
        null,
    ];
    return ObjectData;
}(ConfigBase));
//# sourceMappingURL=object.js.map
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable } from '@angular/core';
import { BrowserXhr } from '@angular/http';
import { ConfigBase } from '../config-base';
export var JsonData = (function (_super) {
    __extends(JsonData, _super);
    function JsonData(file, xhr, env) {
        _super.call(this, env, file, xhr);
    }
    JsonData.prototype.getData = function (file, xhr) {
        var data = this.load(file, xhr);
        if (Array.isArray(data)) {
            throw new Error("Data type 'array' to config invalid");
        }
        if (Object.keys(data).length === 0) {
            throw new Error('Config is required');
        }
        return data;
    };
    JsonData.prototype.load = function (file, xhr) {
        var data;
        var _xhr = xhr.build();
        _xhr.open('GET', file, false);
        _xhr.reponseType = 'json';
        _xhr.addEventListener('load', function () {
            try {
                data = JSON.parse(_xhr.responseText);
            }
            catch (err) {
                throw new Error("Syntax error '" + file + "' error: " + err.message);
            }
        });
        _xhr.addEventListener('error', function () {
            throw new Error("Problem to access '" + file + "'");
        });
        _xhr.send();
        return data;
    };
    JsonData.decorators = [
        { type: Injectable },
    ];
    JsonData.ctorParameters = [
        null,
        { type: BrowserXhr, },
        null,
    ];
    return JsonData;
}(ConfigBase));
//# sourceMappingURL=json.js.map
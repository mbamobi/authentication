import { OpaqueToken } from '@angular/core';
export var ConfigToken = new OpaqueToken('CONFIGTOKEN');
export var EnvToken = new OpaqueToken('ENVTOKEN');
export var CustomLoaderToken = new OpaqueToken('CUSTOMLOADERTOKEN');
export var ConfigBase = (function () {
    function ConfigBase(env) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.env = env;
        this.envsExtend = {};
        this.keysEnvExtend = {};
        if (env) {
            ConfigBase.envs.push(env);
        }
        this.data = this.getData.apply(this, args);
        this.extractExtends();
    }
    ConfigBase.prototype.extractExtends = function () {
        for (var key in this.data) {
            for (var env in this.data[key]) {
                if (env.indexOf(':') !== -1) {
                    this.checkExtends(env, key, this.data[key]);
                }
            }
        }
    };
    ConfigBase.prototype.setEnv = function (env) {
        ConfigBase.envs.push(env);
        this.env = env;
        return this;
    };
    ConfigBase.prototype.getEnv = function () {
        return this.env;
    };
    ConfigBase.prototype.setEnvExtend = function (env, envExtend) {
        this.envsExtend[env] = envExtend;
        return this;
    };
    ConfigBase.prototype.getEnvExtend = function (env) {
        return this.envsExtend[env] ? this.envsExtend[env] : null;
    };
    ConfigBase.prototype.setKeyEnvExtend = function (key, env, envExtend) {
        this.keysEnvExtend[key] = this.keysEnvExtend[key] || {};
        this.keysEnvExtend[key][env] = envExtend;
        return this;
    };
    ConfigBase.prototype.getKeyEnvExtend = function (key, env) {
        if (this.keysEnvExtend[key] === undefined) {
            return null;
        }
        if (this.keysEnvExtend[key][env] === undefined) {
            return null;
        }
        return this.keysEnvExtend[key][env];
    };
    ConfigBase.prototype.set = function (key, value, env) {
        var _env = this.env;
        if (env === false) {
            _env = '';
        }
        else if (typeof env === 'string') {
            _env = env;
            if (env.indexOf(':') !== -1) {
                this.checkExtends(env, key, value);
            }
        }
        if (_env) {
            this.validateDataAlreadyAssign(key);
            this.data[key] = this.data[key] || {};
            this.data[key][_env] = value;
            ConfigBase.envs.push(_env);
            return this;
        }
        this.data[key] = value;
        return this;
    };
    ConfigBase.prototype.validateDataAlreadyAssign = function (key) {
        if (typeof this.data[key] !== 'object') {
            if (this.data[key] !== undefined) {
                throw new Error('Not allow assign to value initialized how scalar');
            }
        }
        else if (this.data[key] !== null) {
            var envs = ConfigBase.envs.filter(function (value, index, array) { return array.indexOf(value) === index; });
            var isThrow = true;
            for (var i = 0, length_1 = envs.length; i < length_1; i++) {
                if (envs[i] in this.data[key]) {
                    isThrow = false;
                }
            }
            if (isThrow) {
                throw new Error('Not allow assign to value initialized how object');
            }
        }
    };
    ConfigBase.prototype.checkExtends = function (env, key, value) {
        if (typeof value !== 'object' || value === null) {
            throw new Error('To extends value should be object');
        }
        var envExtend = env.substr(env.indexOf(':') + 1);
        var data = this.get(key, envExtend);
        if (typeof data !== 'object' || data === null) {
            throw new Error("The env '" + envExtend + "' should be object");
        }
        env = env.substr(0, env.indexOf(':'));
        this.setKeyEnvExtend(key, env, envExtend);
    };
    ConfigBase.prototype.get = function (key, env) {
        var result = this.data[key] !== undefined ? this.data[key] : null;
        if (result === null) {
            return null;
        }
        if (env === false) {
            return result;
        }
        if (typeof env === 'string') {
            return this.getResult(result, key, env);
        }
        var resultExtends = this.getResult(result, key, this.env);
        if (resultExtends) {
            return resultExtends;
        }
        return result;
    };
    ConfigBase.prototype.getResult = function (result, key, env) {
        var envExtend = this.getKeyEnvExtend(key, env);
        if (!envExtend) {
            envExtend = this.getEnvExtend(env);
        }
        if (!envExtend) {
            return result[env] !== undefined ? result[env] : null;
        }
        var lastResult = result[env];
        if (!lastResult) {
            lastResult = result[[env, ':', envExtend].join('')];
        }
        var argumentsAssign = [
            {}
        ];
        this.orderEnvExtends(result, key, envExtend, argumentsAssign);
        argumentsAssign.push(lastResult);
        return Object.assign.apply(null, argumentsAssign);
    };
    ConfigBase.prototype.orderEnvExtends = function (result, key, env, argumentsApply) {
        if (result[env]) {
            argumentsApply.unshift(result[env]);
            return;
        }
        var envExtend = this.getKeyEnvExtend(key, env);
        if (!envExtend) {
            envExtend = this.getEnvExtend(env);
        }
        if (envExtend) {
            var envConcat = [env, ':', envExtend].join('');
            argumentsApply.unshift(result[envConcat]);
            this.orderEnvExtends(result, key, envExtend, argumentsApply);
        }
    };
    ConfigBase.prototype.getAll = function () {
        return this.data;
    };
    ConfigBase.envs = [];
    return ConfigBase;
}());
//# sourceMappingURL=config-base.js.map
import { Inject, Injectable, OpaqueToken, Optional } from '@angular/core';
import { Config } from '@ramonornela/configuration';
var KEY_DEFAULTS = '_defaults';
var KEY_CONFIG = 'urlResolver';
export var ConfigRoutesToken = new OpaqueToken('CONFIGROUTESTOKEN');
export var MetadataBase = (function () {
    function MetadataBase(config, configData) {
        this.data = {};
        if (typeof config === 'object' && config !== null) {
            this.data = config.get(KEY_CONFIG);
        }
        if (configData) {
            this.data = configData;
        }
        if (this.data !== 'object' && this.data === null) {
            throw new Error('Invalid data type routes');
        }
    }
    MetadataBase.prototype._set = function (id, key, value) {
        this.data[id] = this.data[id] || {};
        this.data[id][key] = value;
    };
    MetadataBase.prototype._add = function (id, key, value) {
        this.data[id] = this.data[id] || {};
        this.data[id][key] = this.data[id][key] || {};
        Object.assign(this.data[id][key], value);
    };
    MetadataBase.prototype._get = function (id, key, merge) {
        var data = this.get(id) || {};
        if (merge) {
            data = this.mergeDefaults(data, key);
        }
        return data[key];
    };
    MetadataBase.prototype.get = function (id) {
        if (this.data[id] === undefined) {
            throw "Identificator '" + id + "' not exists";
        }
        return this.data[id];
    };
    MetadataBase.prototype.has = function (id) {
        return id in this.data;
    };
    MetadataBase.prototype.setMethod = function (id, method) {
        this._set(id, 'method', method);
        return this;
    };
    MetadataBase.prototype.getMethod = function (id) {
        return this._get(id, 'method', false);
    };
    MetadataBase.prototype.setUrl = function (id, url) {
        this._set(id, 'url', url);
        return this;
    };
    MetadataBase.prototype.getUrl = function (id) {
        return this._get(id, 'url', false);
    };
    MetadataBase.prototype.setParams = function (id, params) {
        this._set(id, 'params', params);
        return this;
    };
    MetadataBase.prototype.addParam = function (id, param) {
        this._add(id, 'params', param);
        return this;
    };
    MetadataBase.prototype.getParams = function (id) {
        return this._get(id, 'params', false);
    };
    MetadataBase.prototype.setHeaders = function (id, headers) {
        this._set(id, 'headers', headers);
        return this;
    };
    MetadataBase.prototype.addHeader = function (id, header) {
        this._add(id, 'headers', header);
        return this;
    };
    MetadataBase.prototype.getHeaders = function (id) {
        return this._get(id, 'headers', true);
    };
    MetadataBase.prototype.mergeDefaults = function (data, key) {
        if (data[key] === null || data[key] === undefined) {
            data[key] = {};
        }
        var defaults = this.getDefaults(key);
        for (var index in defaults) {
            if (data[key][index] === null || data[key][index] === undefined) {
                data[key][index] = defaults[index];
            }
        }
        return data;
    };
    MetadataBase.prototype.setDefaults = function (key, defaults) {
        this._set(KEY_DEFAULTS, key, defaults);
        return this;
    };
    MetadataBase.prototype.addDefaults = function (key, defaults) {
        this._add(KEY_DEFAULTS, key, defaults);
        return this;
    };
    MetadataBase.prototype.getDefaults = function (key) {
        var data = this.data;
        if ((data[KEY_DEFAULTS] !== null && data[KEY_DEFAULTS] !== undefined)
            && (data[KEY_DEFAULTS][key] !== null && data[KEY_DEFAULTS][key] !== undefined)) {
            return data[KEY_DEFAULTS][key];
        }
        return null;
    };
    MetadataBase.decorators = [
        { type: Injectable },
    ];
    MetadataBase.ctorParameters = [
        { type: Config, decorators: [{ type: Optional },] },
        { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [ConfigRoutesToken,] },] },
    ];
    return MetadataBase;
}());
//# sourceMappingURL=metadata-base.js.map
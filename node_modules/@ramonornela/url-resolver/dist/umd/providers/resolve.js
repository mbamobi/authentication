(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core', './metadata/metadata'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    var metadata_1 = require('./metadata/metadata');
    var Resolve = (function () {
        function Resolve(metadata) {
            this.metadata = metadata;
            this.preffixVariable = '{';
            this.suffixVariable = '}';
        }
        Resolve.prototype.getMetadata = function () {
            return this.metadata;
        };
        Resolve.prototype.setPreffixVariable = function (preffix) {
            this.preffixVariable = preffix;
            return this;
        };
        Resolve.prototype.setSuffixVariable = function (suffix) {
            this.suffixVariable = suffix;
            return this;
        };
        Resolve.prototype.url = function (id, params) {
            params = params || {};
            var paramsLeftOver = [];
            this.validateParams(id, params);
            var url = this.metadata.getUrl(id);
            for (var index in params) {
                url = this.replaceUrl(url, index, params[index], params, paramsLeftOver);
            }
            var paramsGlobals = this.metadata.getDefaults('params');
            if (params && Object.keys(params).length) {
                this.validateParamsGlobals(params);
                for (var paramGlobal in paramsGlobals) {
                    if (paramsLeftOver.indexOf(paramGlobal) !== -1 && params[paramGlobal]) {
                        url = this.replaceUrl(url, paramGlobal, params[paramGlobal], params);
                    }
                }
            }
            url = this.replaceUrlParamsGlobalsDefaultValue(paramsGlobals, url);
            url = this.replaceUrlVariables(url);
            url = this.replaceUrlHost(url);
            var regex = new RegExp('(?:(:?(:?\\?|&)[\\w\\-]+=)|\\/)\\' + this.preffixVariable + '[\\w\\-]+\\' + this.suffixVariable, 'g');
            url = url.replace(regex, '');
            return url;
        };
        Resolve.prototype.replaceUrl = function (url, index, value, params, paramsLeftOver) {
            var variable = '\\' + this.preffixVariable + index + '\\' + this.suffixVariable, regex = new RegExp(variable, 'g'), urlPrevious = url;
            if (value !== null && value !== undefined) {
                url = url.replace(regex, value);
            }
            if (!urlPrevious.match(regex) && Array.isArray(paramsLeftOver)) {
                paramsLeftOver.push(index);
            }
            else if (urlPrevious.match(regex) && (typeof params === 'object')) {
                delete params[index];
            }
            return url;
        };
        Resolve.prototype.replaceUrlParamsGlobalsDefaultValue = function (paramsGlobals, url) {
            for (var paramGlobal in paramsGlobals) {
                if (paramsGlobals[paramGlobal]['default'] !== null) {
                    url = this.replaceUrl(url, paramGlobal, paramsGlobals[paramGlobal]['default']);
                }
            }
            return url;
        };
        Resolve.prototype.replaceUrlVariables = function (url) {
            var variables = this.metadata.getDefaults('variables');
            for (var variableName in variables) {
                url = this.replaceUrl(url, variableName, variables[variableName]);
            }
            return url;
        };
        Resolve.prototype.replaceUrlHost = function (url) {
            var host = this.metadata.getDefaults('host') || '';
            if (url.indexOf('http') === -1) {
                url = host.replace(/\/$/, '') + '/' + url.replace(/^\//, '');
            }
            return url;
        };
        Resolve.prototype.validateParamsGlobals = function (params) {
            this._validateParams(this.metadata.getDefaults('params'), params, true);
        };
        Resolve.prototype.validateParams = function (id, params, onlyAssign) {
            this._validateParams(this.metadata.getParams(id), params, onlyAssign);
        };
        Resolve.prototype._validateParams = function (paramsIds, params, onlyAssign, id) {
            for (var param in paramsIds) {
                if (onlyAssign && !(param in params)) {
                    continue;
                }
                this.setDefaultValue(paramsIds, param, params);
                this.validates(paramsIds, param, params);
            }
        };
        Resolve.prototype.setDefaultValue = function (paramsIds, param, params) {
            var defaultValue;
            if (paramsIds[param] === null || paramsIds[param] === undefined) {
                throw 'Parameter ' + param + ' not exists';
            }
            defaultValue = paramsIds[param].default;
            if ((defaultValue !== null && defaultValue !== undefined) && (params[param] === null || params[param] === undefined)) {
                params[param] = defaultValue;
            }
        };
        Resolve.prototype.validates = function (paramsIds, param, params) {
            var require, type;
            if (paramsIds[param] === null || paramsIds[param] === undefined) {
                throw 'Parameter not exists';
            }
            type = paramsIds[param].type || 'string';
            if (typeof params[param] !== type && (params[param] !== null && params[param] !== undefined)) {
                throw 'Data type invalid parameter: ' + param + ' type ' + (typeof params[param]);
            }
            require = paramsIds[param].required || false;
            if (require) {
                if (params[param] === null || params[param] === undefined) {
                    throw 'Parameter ' + param + ' is required.';
                }
            }
            if (paramsIds[param].validation) {
                var validation = paramsIds[param].validation;
                switch (true) {
                    case typeof validation === 'string':
                        var regex = new RegExp(validation);
                        if (!regex.test(params[param].toString())) {
                            throw 'Parameter should follow the rule ' + validation;
                        }
                        break;
                    case Array.isArray(validation):
                        if (validation.indexOf(params[param]) === -1) {
                            throw 'Param should be (' + validation.join(',') + ')';
                        }
                        break;
                }
            }
            return true;
        };
        Resolve.decorators = [
            { type: core_1.Injectable },
        ];
        Resolve.ctorParameters = [
            { type: metadata_1.Metadata, },
        ];
        return Resolve;
    }());
    exports.Resolve = Resolve;
});
//# sourceMappingURL=resolve.js.map
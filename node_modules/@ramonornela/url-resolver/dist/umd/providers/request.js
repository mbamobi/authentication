(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core', '@angular/http', './resolve'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    var http_1 = require('@angular/http');
    var resolve_1 = require('./resolve');
    var Request = (function () {
        function Request(resolve) {
            this.resolve = resolve;
            this.defaultOptions = {};
        }
        Request.prototype.getResolve = function () {
            return this.resolve;
        };
        Request.prototype.getMetadata = function () {
            return this.getResolve().getMetadata();
        };
        Request.prototype.create = function (id, params, options) {
            if (options === void 0) { options = {}; }
            var defaultOptions = Object.assign({}, this.defaultOptions);
            options = Object.assign(defaultOptions, options);
            options.headers = options.headers || {};
            var headersDefault = this.getMetadata().getHeaders(id);
            for (var index in options.headers) {
                headersDefault[index] = options.headers[index];
            }
            var copyParams = Object.assign({}, params);
            Object.assign(options, {
                method: options.method || this.getMetadata().getMethod(id),
                url: this.resolve.url(id, copyParams),
                headers: new http_1.Headers(headersDefault)
            });
            if (copyParams && Object.keys(copyParams).length) {
                this.serializeParams(id, options, copyParams);
            }
            return new http_1.Request(options);
        };
        Request.prototype.setDefaultOptions = function (options) {
            this.defaultOptions = options;
        };
        Request.prototype.serializeParams = function (id, options, params) {
            switch (options.method) {
                case 'GET':
                case 'DELETE':
                    this.resolve.validateParams(id, Object.assign({}, params), true);
                    options.search = this.createSearchParams(params);
                    break;
                case 'POST':
                case 'PUT':
                    if (!options.body) {
                        options.body = params;
                        var contentType = options.headers.get('content-type');
                        if (!contentType) {
                            options.body = this.createSearchParams(params);
                        }
                    }
                    break;
            }
        };
        Request.prototype.createSearchParams = function (params) {
            var search = new http_1.URLSearchParams('');
            for (var param in params) {
                if (typeof params[param] === 'object') {
                    search.set(param, JSON.stringify(params[param]));
                }
                else {
                    search.set(param, params[param]);
                }
            }
            return search;
        };
        Request.decorators = [
            { type: core_1.Injectable },
        ];
        Request.ctorParameters = [
            { type: resolve_1.Resolve, },
        ];
        return Request;
    }());
    exports.Request = Request;
});
//# sourceMappingURL=request.js.map
import { ConnectionBackend, Connection, Request, Response, ReadyState, BrowserXhr, ResponseOptions, XSRFStrategy } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Events } from './events';
export declare function xhrBackendFactory(browserXhr: BrowserXhr, responseOptions: ResponseOptions, xsrf: XSRFStrategy, events: HttpEvents): XHRBackend;
export declare class HttpEvents extends Events {
    static PRE_REQUEST: string;
    static POST_REQUEST: string;
    static POST_REQUEST_SUCCESS: string;
    static POST_REQUEST_ERROR: string;
    constructor();
    preRequest(req: Request): void;
    postRequest(resp: Response): void;
    postRequestSuccess(resp: Response): void;
    postRequestError(resp: Response): void;
    onPreRequest(callback: (req?: any) => any): void;
    onPostRequest(callback: (req?: any) => any): void;
    onPostRequestSuccess(callback: (req?: any) => any): void;
    onPostRequestError(callback: (req?: any) => any): void;
}
export declare class XHRConnection implements Connection {
    private events;
    request: Request;
    response: Observable<Response>;
    readyState: ReadyState;
    constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions, events?: HttpEvents);
    setDetectedContentType(req: any, _xhr: any): void;
}
export declare class XHRBackend implements ConnectionBackend {
    private browserXHR;
    private baseResponseOptions;
    private xsrfStrategy;
    private events;
    constructor(browserXHR: BrowserXhr, baseResponseOptions: ResponseOptions, xsrfStrategy: XSRFStrategy, events: HttpEvents);
    createConnection(request: Request): XHRConnection;
}
export { Events };

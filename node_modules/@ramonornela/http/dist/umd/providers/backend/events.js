(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    var Events = (function () {
        function Events() {
            this.channels = [];
        }
        Events.prototype.subscribe = function (topic) {
            var _this = this;
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            if (!this.channels[topic]) {
                this.channels[topic] = [];
            }
            handlers.forEach(function (handler) {
                _this.channels[topic].push(handler);
            });
        };
        Events.prototype.unsubscribe = function (topic, handler) {
            if (handler === void 0) { handler = null; }
            var t = this.channels[topic];
            if (!t) {
                return false;
            }
            if (!handler) {
                delete this.channels[topic];
                return true;
            }
            var i = t.indexOf(handler);
            if (i < 0) {
                return false;
            }
            t.splice(i, 1);
            if (!t.length) {
                delete this.channels[topic];
            }
            return true;
        };
        Events.prototype.publish = function (topic) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var t = this.channels[topic];
            if (!t) {
                return null;
            }
            var responses = [];
            t.forEach(function (handler) {
                responses.push(handler.apply(null, args));
            });
            return responses;
        };
        Events.decorators = [
            { type: core_1.Injectable },
        ];
        Events.ctorParameters = [];
        return Events;
    }());
    exports.Events = Events;
});
//# sourceMappingURL=events.js.map
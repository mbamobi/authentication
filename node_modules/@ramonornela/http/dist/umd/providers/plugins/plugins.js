(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    exports.HttpPluginsToken = new core_1.OpaqueToken('HTTP_PLUGINS');
    var EventsMethods = ['preRequest', 'postRequest', 'postRequestSuccess', 'postRequestError'];
    var AllPlugins = '*';
    var Plugins = (function () {
        function Plugins(plugins) {
            this.plugins = [];
            this.throwsException = true;
            this.options = {};
            if (plugins) {
                this.set(plugins);
            }
        }
        Plugins.prototype.set = function (plugins) {
            this.plugins = [];
            for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {
                var plugin = plugins_1[_i];
                this.add(plugin);
            }
            return this;
        };
        Plugins.prototype.setThrowsException = function (throws) {
            this.throwsException = throws;
            return this;
        };
        Plugins.prototype.getThrowsExceptionPlugin = function (plugin) {
            if (typeof plugin !== 'string') {
                plugin = plugin.getName();
            }
            this.options[plugin] = this.options[plugin] || {};
            var throwPlugin = 'throwsException' in this.options[plugin]
                ? this.options[plugin].throwsException
                : this.throwsException;
            return throwPlugin;
        };
        Plugins.prototype.isThrowsException = function (plugin) {
            if (typeof plugin !== 'string') {
                plugin = plugin.getName();
            }
            var throwPlugin = this.getThrowsExceptionPlugin(plugin);
            return throwPlugin === true || typeof throwPlugin === 'function';
        };
        Plugins.prototype.add = function (plugin, priority) {
            var implementsInterfaces = false;
            for (var _i = 0, EventsMethods_1 = EventsMethods; _i < EventsMethods_1.length; _i++) {
                var method = EventsMethods_1[_i];
                if (method in plugin) {
                    implementsInterfaces = true;
                }
            }
            if (implementsInterfaces === false) {
                throw 'Plugin not implements interface of events (preRequest, postRequest ...).';
            }
            var pluginConf = {};
            pluginConf[plugin.getName()] = plugin;
            if (!priority) {
                priority = plugin.getPriority();
            }
            if (this.plugins[priority]) {
                this.plugins.splice(priority, 0, pluginConf);
            }
            else {
                this.plugins[priority] = pluginConf;
            }
            this.plugins.filter(function (value) { return value !== undefined || value !== null; });
            return this;
        };
        Plugins.prototype.get = function (name) {
            var index = this.indexOf(name);
            if (index !== -1) {
                return this.plugins[index][name];
            }
            return null;
        };
        Plugins.prototype.has = function (name) {
            return this.indexOf(name) !== -1 ? true : false;
        };
        Plugins.prototype.indexOf = function (name) {
            for (var index = 0, length_1 = this.plugins.length; index < length_1; index++) {
                var plugin = this.plugins[index];
                if (plugin[name]) {
                    return index;
                }
            }
            return -1;
        };
        Plugins.prototype.remove = function (name) {
            var index = this.indexOf(name);
            if (index !== -1) {
                this.plugins.splice(index, 1);
                return true;
            }
            return false;
        };
        Plugins.prototype.getAll = function () {
            return this.plugins;
        };
        Plugins.prototype.forEach = function (fn) {
            var i = 0;
            for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {
                var object = _a[_i];
                for (var name_1 in object) {
                    var fnBreak = fn(object[name_1], i++);
                    if (fnBreak === false) {
                        return;
                    }
                }
            }
        };
        Plugins.prototype.cleanOptions = function () {
            this.forEach(function (plugin) {
                if ('restoreOptions' in plugin) {
                    plugin.restoreOptions();
                }
            });
            this.options = {};
        };
        Plugins.prototype.setOptions = function (options) {
            var keys = Object.keys(options);
            if (keys.indexOf(AllPlugins) !== -1) {
                this.forEach(function (plugin) {
                    if ('setOptions' in plugin) {
                        plugin.setOptions(options[AllPlugins]);
                    }
                });
                delete options[AllPlugins];
            }
            for (var pluginName in options) {
                if (!this.has(pluginName)) {
                    throw new Error('Plugin not exists');
                }
                var plugin = this.get(pluginName);
                if ('setOptions' in plugin) {
                    plugin.setOptions(options[pluginName]);
                }
            }
            this.options = options;
            return this;
        };
        Plugins.prototype.runEvent = function (event, params) {
            var _this = this;
            if (EventsMethods.indexOf(event) === -1) {
                throw new Error("Event '" + event + "' not exists");
            }
            this.forEach(function (plugin) {
                if (!(event in plugin)) {
                    return;
                }
                try {
                    var method = plugin[event];
                    method.apply(plugin, params);
                }
                catch (ex) {
                    if (_this.isThrowsException(plugin)) {
                        var callbackException = _this.getThrowsExceptionPlugin(plugin);
                        if (typeof callbackException === 'function') {
                            callbackException(ex);
                            return;
                        }
                        throw ex;
                    }
                }
            });
        };
        Plugins.decorators = [
            { type: core_1.Injectable },
        ];
        Plugins.ctorParameters = [
            { type: Array, },
        ];
        return Plugins;
    }());
    exports.Plugins = Plugins;
});
//# sourceMappingURL=plugins.js.map
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    exports.ParseResponseToken = new core_1.OpaqueToken('PARSE_RESPONSE');
    var ParseResponsePlugin = (function () {
        function ParseResponsePlugin(parseResponses) {
            this.parseResponses = parseResponses;
        }
        ParseResponsePlugin.prototype.getPriority = function () {
            return 2;
        };
        ParseResponsePlugin.prototype.getName = function () {
            return 'parse-response';
        };
        ParseResponsePlugin.prototype.postRequest = function (response) {
            for (var _i = 0, _a = this.parseResponses; _i < _a.length; _i++) {
                var parseResponse = _a[_i];
                parseResponse.parse(response);
            }
        };
        ParseResponsePlugin.decorators = [
            { type: core_1.Injectable },
        ];
        ParseResponsePlugin.ctorParameters = [
            { type: Array, },
        ];
        return ParseResponsePlugin;
    }());
    exports.ParseResponsePlugin = ParseResponsePlugin;
});
//# sourceMappingURL=parse-response-plugin.js.map